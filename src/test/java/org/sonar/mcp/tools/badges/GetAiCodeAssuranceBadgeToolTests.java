/*
 * Sonar MCP Server
 * Copyright (C) 2025 SonarSource
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Sonar Source-Available License for more details.
 *
 * You should have received a copy of the Sonar Source-Available License
 * along with this program; if not, see https://sonarsource.com/license/ssal/
 */
package org.sonar.mcp.tools.badges;

import com.github.tomakehurst.wiremock.http.Body;
import io.modelcontextprotocol.spec.McpSchema;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import org.apache.hc.core5.http.HttpStatus;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.sonar.mcp.harness.MockWebServer;
import org.sonar.mcp.harness.ReceivedRequest;
import org.sonar.mcp.harness.SonarMcpServerTest;
import org.sonar.mcp.harness.SonarMcpServerTestHarness;
import org.sonar.mcp.serverapi.badges.ProjectBadgesApi;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static org.assertj.core.api.Assertions.assertThat;

class GetAiCodeAssuranceBadgeToolTests {

  @Nested
  class MissingPrerequisite {

    @SonarMcpServerTest
    void it_should_return_an_error_if_sonarqube_cloud_token_is_missing(SonarMcpServerTestHarness harness) {
      var mcpClient = harness.newClient(Map.of("SONARQUBE_CLOUD_ORG", "org"));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project")));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult("Not connected to SonarQube Cloud, please provide 'SONARQUBE_CLOUD_TOKEN' and " +
          "'SONARQUBE_CLOUD_ORG'", true));
    }

    @SonarMcpServerTest
    void it_should_return_an_error_if_sonarqube_cloud_org_is_missing(SonarMcpServerTestHarness harness) {
      var mcpClient = harness.newClient(Map.of("SONARQUBE_CLOUD_TOKEN", "token"));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project")));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult("Not connected to SonarQube Cloud, please provide 'SONARQUBE_CLOUD_TOKEN' and " +
          "'SONARQUBE_CLOUD_ORG'", true));
    }

  }

  @Nested
  class WithServer {

    private final MockWebServer mockServer = new MockWebServer();

    @BeforeEach
    void setup() {
      mockServer.start();
    }

    @AfterEach
    void teardown() {
      mockServer.stop();
    }

    @SonarMcpServerTest
    void it_should_return_an_error_if_the_request_fails_due_to_token_permission(SonarMcpServerTestHarness harness) {
      var mcpClient = harness.newClient(Map.of(
        "SONARQUBE_CLOUD_URL", mockServer.baseUrl(),
        "SONARQUBE_CLOUD_TOKEN", "token",
        "SONARQUBE_CLOUD_ORG", "org"
      ));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project")));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult("An error occurred during the tool execution: Make sure your token is valid.", true));
    }

    @SonarMcpServerTest
    void it_should_show_error_when_request_fails(SonarMcpServerTestHarness harness) {
      mockServer.stubFor(get(ProjectBadgesApi.AI_CODE_ASSURANCE_PATH + "?project=" + URLEncoder.encode("my-project", StandardCharsets.UTF_8))
        .willReturn(aResponse().withStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR)));
      var mcpClient = harness.newClient(Map.of(
        "SONARQUBE_CLOUD_URL", mockServer.baseUrl(),
        "SONARQUBE_CLOUD_TOKEN", "token",
        "SONARQUBE_CLOUD_ORG", "org"
      ));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project")));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult("An error occurred during the tool execution: SonarQube answered with Error 500 on " + mockServer.baseUrl() + "/api" +
          "/project_badges/ai_code_assurance?project=my-project", true));
    }

    @SonarMcpServerTest
    void it_should_return_the_badge_svg(SonarMcpServerTestHarness harness) {
      mockServer.stubFor(get(ProjectBadgesApi.AI_CODE_ASSURANCE_PATH + "?project=" + URLEncoder.encode("my-project", StandardCharsets.UTF_8))
        .willReturn(aResponse().withResponseBody(
          Body.fromOneOf(null, generateAiCodeAssuranceSvg(), null, null)
        )));
      var mcpClient = harness.newClient(Map.of(
        "SONARQUBE_CLOUD_URL", mockServer.baseUrl(),
        "SONARQUBE_CLOUD_TOKEN", "token",
        "SONARQUBE_CLOUD_ORG", "org"
      ));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project")));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult(generateAiCodeAssuranceSvg(), false));
      assertThat(mockServer.getReceivedRequests())
        .containsExactly(new ReceivedRequest("Bearer token", ""));
    }

    @SonarMcpServerTest
    void it_should_return_the_badge_svg_with_optional_token(SonarMcpServerTestHarness harness) {
      mockServer.stubFor(get(ProjectBadgesApi.AI_CODE_ASSURANCE_PATH + "?project=" + URLEncoder.encode("my-project", StandardCharsets.UTF_8) + "&token=secret")
        .willReturn(aResponse().withResponseBody(
          Body.fromOneOf(null, generateAiCodeAssuranceSvg(), null, null)
        )));
      var mcpClient = harness.newClient(Map.of(
        "SONARQUBE_CLOUD_URL", mockServer.baseUrl(),
        "SONARQUBE_CLOUD_TOKEN", "token",
        "SONARQUBE_CLOUD_ORG", "org"
      ));

      var result = mcpClient.callTool(new McpSchema.CallToolRequest(
        GetAiCodeAssuranceBadgeTool.TOOL_NAME,
        Map.of(
          GetAiCodeAssuranceBadgeTool.PROJECT_PROPERTY, "my-project",
          GetAiCodeAssuranceBadgeTool.TOKEN_PROPERTY, "secret"
        )));

      assertThat(result)
        .isEqualTo(new McpSchema.CallToolResult(generateAiCodeAssuranceSvg(), false));
      assertThat(mockServer.getReceivedRequests())
        .containsExactly(new ReceivedRequest("Bearer token", ""));
    }
  }

  private static String generateAiCodeAssuranceSvg() {
    return """
        <svg width="169" height="22" viewBox="0 0 169 22" fill="none" xmlns="http://www.w3.org/2000/svg">
        <!-- AI CODE ASSURED -->
          <path d="M4 0.5H164.193C166.126 0.5 167.693 2.067 167.693 4V18C167.693 19.933 166.126 21.5 164.193 21.5H4.00001C2.06701 21.5 0.5 19.933 0.5 18V4C0.5 2.067 2.067 0.5 4 0.5Z" fill="white"/>
        <path d="M4 0.5H164.193C166.126 0.5 167.693 2.067 167.693 4V18C167.693 19.933 166.126 21.5 164.193 21.5H4.00001C2.06701 21.5 0.5 19.933 0.5 18V4C0.5 2.067 2.067 0.5 4 0.5Z" stroke="#C5CDDF"/>
        <path d="M13.5254 8.2615C13.1409 7.87769 12.6363 7.67055 12.0926 7.67664C11.8433 7.67664 11.645 7.88683 11.645 8.13661C11.645 8.38639 11.8493 8.59048 12.0956 8.59048C12.0986 8.59048 12.1046 8.59048 12.1106 8.59048C12.7204 8.59048 13.222 9.09309 13.228 9.71146C13.228 9.96124 13.4322 10.1653 13.6785 10.1653H13.6816C13.9309 10.1653 14.1291 9.95515 14.1291 9.70536C14.1231 9.16011 13.9098 8.64531 13.5254 8.26455V8.2615Z" fill="#126ED3"/>
        <path d="M12.1646 4.91079C12.1827 4.91079 12.1977 4.91079 12.2127 4.91079C14.5316 4.91079 16.5171 6.65318 16.8445 8.98042C16.8775 9.20888 17.0697 9.37337 17.289 9.37337C17.31 9.37337 17.3311 9.37337 17.3521 9.37032C17.5984 9.33377 17.7696 9.10226 17.7336 8.85248C17.3431 6.07746 14.9731 4 12.2097 4C12.1917 4 12.1736 4 12.1556 4C11.9063 4 11.7081 4.21018 11.7081 4.45997C11.7081 4.70975 11.9123 4.91384 12.1586 4.91384L12.1646 4.91079Z" fill="#126ED3"/>
        <path d="M15.9674 10.0161C16.0094 8.9256 15.625 7.82291 14.8049 6.99436C13.246 5.41342 10.7109 5.41342 9.15492 6.99436C8.35292 7.80768 7.94441 8.89819 7.99247 10.0313C7.32564 10.205 6.69185 10.5522 6.1692 11.0823C4.61027 12.6632 4.61027 15.2341 6.1692 16.812C6.94717 17.601 7.97145 17.997 8.99572 17.997C10.02 17.997 11.0413 17.601 11.8222 16.812C11.8853 16.7481 11.9424 16.678 12.0025 16.611C12.7354 17.4609 13.8077 18 15.0062 18C17.2109 18 19.0012 16.1815 19.0012 13.9487C19.0012 12.0844 17.7216 10.4578 15.9674 10.0161ZM15.0062 17.0892C13.3001 17.0892 11.9123 15.6819 11.9123 13.9517C11.9123 13.6989 11.7111 13.4948 11.4618 13.4948C11.2125 13.4948 11.0112 13.6989 11.0112 13.9517C11.0112 14.631 11.1794 15.2707 11.4708 15.8342C11.3837 15.953 11.2906 16.0657 11.1854 16.1723C9.97794 17.3969 8.0135 17.3969 6.809 16.1723C5.6015 14.9478 5.6015 12.9587 6.809 11.7341C8.0165 10.5096 9.97794 10.5096 11.1854 11.7341C11.3627 11.9139 11.648 11.9139 11.8222 11.7341C11.9965 11.5544 11.9995 11.265 11.8222 11.0884C11.0142 10.2689 9.9449 9.87904 8.88458 9.9095C8.87257 9.06268 9.19096 8.25241 9.79171 7.64623C10.9992 6.42169 12.9607 6.42169 14.1682 7.64623C15.3757 8.87077 15.3757 10.8629 14.1682 12.0844C13.9909 12.2642 13.9909 12.5535 14.1682 12.7302C14.2553 12.8186 14.3724 12.8642 14.4866 12.8642C14.6007 12.8642 14.7178 12.8186 14.8049 12.7302C15.3156 12.2124 15.655 11.591 15.8292 10.933C17.1449 11.3046 18.1 12.5414 18.1 13.9548C18.1 15.685 16.7123 17.0923 15.0062 17.0923V17.0892Z" fill="#126ED3"/>
        <path d="M128.292 15.4829C127.661 15.4829 127.117 15.3437 126.659 15.0653C126.205 14.7841 125.854 14.392 125.607 13.8892C125.363 13.3835 125.24 12.7954 125.24 12.125C125.24 11.4545 125.363 10.8636 125.607 10.3522C125.854 9.83804 126.198 9.43747 126.638 9.15054C127.081 8.86077 127.598 8.71588 128.189 8.71588C128.53 8.71588 128.867 8.7727 129.199 8.88634C129.532 8.99997 129.834 9.18463 130.107 9.44031C130.38 9.69315 130.597 10.0284 130.759 10.446C130.921 10.8636 131.002 11.3778 131.002 11.9886V12.4147H125.956V11.5454H129.979C129.979 11.1761 129.905 10.8466 129.757 10.5568C129.613 10.267 129.405 10.0383 129.135 9.87071C128.868 9.7031 128.553 9.61929 128.189 9.61929C127.789 9.61929 127.442 9.71872 127.15 9.91759C126.86 10.1136 126.637 10.3693 126.48 10.6846C126.324 11 126.246 11.338 126.246 11.6988V12.2784C126.246 12.7727 126.331 13.1917 126.502 13.5355C126.675 13.8764 126.915 14.1363 127.222 14.3153C127.529 14.4914 127.885 14.5795 128.292 14.5795C128.556 14.5795 128.794 14.5426 129.007 14.4687C129.223 14.392 129.409 14.2784 129.566 14.1278C129.722 13.9744 129.843 13.7841 129.928 13.5568L130.9 13.8295C130.797 14.1591 130.625 14.4488 130.384 14.6988C130.142 14.946 129.844 15.1392 129.489 15.2784C129.134 15.4147 128.735 15.4829 128.292 15.4829Z" fill="#174361"/>
        <path d="M121.503 15.4829C120.89 15.4829 120.361 15.338 119.918 15.0483C119.475 14.7585 119.134 14.3593 118.895 13.8508C118.657 13.3423 118.537 12.7613 118.537 12.1079C118.537 11.4432 118.659 10.8565 118.904 10.348C119.151 9.83662 119.495 9.43747 119.935 9.15054C120.378 8.86077 120.895 8.71588 121.486 8.71588C121.946 8.71588 122.361 8.80111 122.73 8.97156C123.1 9.14202 123.402 9.38065 123.638 9.68747C123.874 9.99429 124.02 10.3522 124.077 10.7613H123.071C122.995 10.463 122.824 10.1988 122.56 9.96872C122.299 9.73577 121.946 9.61929 121.503 9.61929C121.111 9.61929 120.767 9.72156 120.472 9.92611C120.179 10.1278 119.951 10.4133 119.786 10.7826C119.624 11.1491 119.543 11.5795 119.543 12.0738C119.543 12.5795 119.623 13.0199 119.782 13.3949C119.944 13.7699 120.171 14.0611 120.463 14.2684C120.759 14.4758 121.105 14.5795 121.503 14.5795C121.765 14.5795 122.002 14.5341 122.215 14.4432C122.428 14.3522 122.608 14.2216 122.756 14.0511C122.904 13.8807 123.009 13.6761 123.071 13.4375H124.077C124.02 13.8238 123.88 14.1718 123.655 14.4815C123.434 14.7883 123.14 15.0326 122.773 15.2145C122.409 15.3934 121.986 15.4829 121.503 15.4829Z" fill="#174361"/>
        <path d="M112.83 11.4091V15.3466H111.825V8.80111H112.796V9.82384H112.881C113.035 9.49145 113.268 9.2244 113.58 9.0227C113.893 8.81815 114.296 8.71588 114.79 8.71588C115.234 8.71588 115.621 8.80679 115.954 8.98861C116.286 9.16759 116.545 9.44031 116.729 9.80679C116.914 10.1704 117.006 10.6307 117.006 11.1875V15.3466H116.001V11.2557C116.001 10.7414 115.867 10.3409 115.6 10.0539C115.333 9.76418 114.967 9.61929 114.501 9.61929C114.18 9.61929 113.893 9.68889 113.64 9.8281C113.39 9.9673 113.192 10.1704 113.048 10.4375C112.903 10.7045 112.83 11.0284 112.83 11.4091Z" fill="#174361"/>
        <path d="M106.989 15.5C106.574 15.5 106.198 15.4218 105.86 15.2656C105.522 15.1065 105.253 14.8778 105.054 14.5795C104.855 14.2784 104.756 13.9147 104.756 13.4886C104.756 13.1136 104.83 12.8096 104.978 12.5767C105.125 12.3409 105.323 12.1562 105.57 12.0227C105.817 11.8892 106.09 11.7897 106.388 11.7244C106.689 11.6562 106.992 11.6022 107.296 11.5625C107.694 11.5113 108.016 11.473 108.263 11.4474C108.513 11.419 108.695 11.3721 108.809 11.3068C108.925 11.2414 108.983 11.1278 108.983 10.9659V10.9318C108.983 10.5113 108.868 10.1846 108.638 9.95168C108.411 9.71872 108.066 9.60225 107.603 9.60225C107.123 9.60225 106.746 9.70736 106.473 9.91759C106.201 10.1278 106.009 10.3522 105.898 10.5909L104.944 10.25C105.114 9.85225 105.341 9.54259 105.625 9.321C105.912 9.09656 106.225 8.94031 106.563 8.85225C106.904 8.76134 107.239 8.71588 107.569 8.71588C107.779 8.71588 108.02 8.74145 108.293 8.79259C108.569 8.84088 108.834 8.94173 109.09 9.09514C109.348 9.24855 109.563 9.48009 109.733 9.78975C109.904 10.0994 109.989 10.5142 109.989 11.0341V15.3466H108.983V14.4602H108.932C108.864 14.6022 108.75 14.7542 108.591 14.9162C108.432 15.0781 108.221 15.2159 107.956 15.3295C107.692 15.4432 107.37 15.5 106.989 15.5ZM107.142 14.5966C107.54 14.5966 107.875 14.5184 108.148 14.3622C108.424 14.2059 108.631 14.0042 108.77 13.7571C108.912 13.5099 108.983 13.25 108.983 12.9772V12.0568C108.941 12.1079 108.847 12.1548 108.702 12.1974C108.56 12.2372 108.395 12.2727 108.208 12.3039C108.023 12.3324 107.843 12.3579 107.667 12.3807C107.493 12.4005 107.353 12.4176 107.245 12.4318C106.983 12.4659 106.739 12.5213 106.512 12.598C106.287 12.6718 106.105 12.7841 105.966 12.9346C105.83 13.0824 105.762 13.2841 105.762 13.5397C105.762 13.8892 105.891 14.1534 106.15 14.3324C106.411 14.5085 106.742 14.5966 107.142 14.5966Z" fill="#174361"/>
        <path d="M100.598 15.3466V8.80113H101.57V9.78976H101.638C101.757 9.4659 101.973 9.20311 102.286 9.00141C102.598 8.79971 102.95 8.69885 103.342 8.69885C103.416 8.69885 103.509 8.70027 103.619 8.70311C103.73 8.70596 103.814 8.71022 103.871 8.7159V9.73863C103.837 9.7301 103.759 9.71732 103.636 9.70027C103.517 9.68039 103.391 9.67044 103.257 9.67044C102.939 9.67044 102.655 9.73721 102.405 9.87073C102.158 10.0014 101.962 10.1832 101.817 10.4162C101.675 10.6463 101.604 10.9091 101.604 11.2045V15.3466H100.598Z" fill="#174361"/>
        <path d="M97.7504 12.6705V8.80115H98.7561V15.3466H97.7504V14.2386H97.6822C97.5288 14.571 97.2901 14.8537 96.9663 15.0867C96.6424 15.3168 96.2333 15.4318 95.739 15.4318C95.3299 15.4318 94.9663 15.3423 94.6481 15.1634C94.3299 14.9815 94.0799 14.7088 93.8981 14.3452C93.7163 13.9787 93.6254 13.5171 93.6254 12.9602V8.80115H94.6311V12.8921C94.6311 13.3693 94.7646 13.75 95.0316 14.0341C95.3015 14.3182 95.6453 14.4602 96.0629 14.4602C96.3129 14.4602 96.5671 14.3963 96.8256 14.2685C97.087 14.1406 97.3058 13.9446 97.4819 13.6804C97.6609 13.4162 97.7504 13.0796 97.7504 12.6705Z" fill="#174361"/>
        <path d="M91.9922 10.267L91.0888 10.5227C91.032 10.3721 90.9481 10.2258 90.8373 10.0838C90.7294 9.93889 90.5817 9.81957 90.3942 9.72582C90.2067 9.63207 89.9666 9.5852 89.674 9.5852C89.2734 9.5852 88.9396 9.67753 88.6726 9.86219C88.4084 10.044 88.2763 10.2755 88.2763 10.5568C88.2763 10.8068 88.3672 11.0042 88.549 11.1491C88.7308 11.294 89.0149 11.4147 89.4013 11.5113L90.3729 11.75C90.9581 11.892 91.3942 12.1093 91.6811 12.402C91.968 12.6917 92.1115 13.0653 92.1115 13.5227C92.1115 13.8977 92.0035 14.2329 91.7876 14.5284C91.5746 14.8238 91.2763 15.0568 90.8927 15.2272C90.5092 15.3977 90.0632 15.4829 89.5547 15.4829C88.8871 15.4829 88.3345 15.338 87.897 15.0483C87.4595 14.7585 87.1825 14.3352 87.066 13.7784L88.0206 13.5397C88.1115 13.892 88.2834 14.1562 88.5362 14.3324C88.7919 14.5085 89.1257 14.5966 89.5376 14.5966C90.0064 14.5966 90.3785 14.4971 90.6541 14.2983C90.9325 14.0966 91.0717 13.8551 91.0717 13.5738C91.0717 13.3466 90.9922 13.1562 90.8331 13.0028C90.674 12.8466 90.4297 12.7301 90.1001 12.6534L89.0092 12.3977C88.4098 12.2557 87.9695 12.0355 87.6882 11.7372C87.4098 11.4361 87.2706 11.0596 87.2706 10.6079C87.2706 10.2386 87.3743 9.9119 87.5817 9.62781C87.7919 9.34372 88.0774 9.12071 88.4382 8.95878C88.8018 8.79685 89.2138 8.71588 89.674 8.71588C90.3217 8.71588 90.8302 8.85793 91.1996 9.14202C91.5717 9.42611 91.8359 9.80111 91.9922 10.267Z" fill="#174361"/>
        <path d="M85.7226 10.267L84.8192 10.5227C84.7624 10.3721 84.6786 10.2258 84.5678 10.0838C84.4599 9.93889 84.3121 9.81957 84.1246 9.72582C83.9371 9.63207 83.6971 9.5852 83.4045 9.5852C83.0039 9.5852 82.6701 9.67753 82.403 9.86219C82.1388 10.044 82.0067 10.2755 82.0067 10.5568C82.0067 10.8068 82.0976 11.0042 82.2795 11.1491C82.4613 11.294 82.7454 11.4147 83.1317 11.5113L84.1033 11.75C84.6886 11.892 85.1246 12.1093 85.4116 12.402C85.6985 12.6917 85.842 13.0653 85.842 13.5227C85.842 13.8977 85.734 14.2329 85.5181 14.5284C85.305 14.8238 85.0067 15.0568 84.6232 15.2272C84.2397 15.3977 83.7937 15.4829 83.2851 15.4829C82.6175 15.4829 82.065 15.338 81.6275 15.0483C81.19 14.7585 80.913 14.3352 80.7965 13.7784L81.7511 13.5397C81.842 13.892 82.0138 14.1562 82.2667 14.3324C82.5224 14.5085 82.8562 14.5966 83.2681 14.5966C83.7369 14.5966 84.109 14.4971 84.3846 14.2983C84.663 14.0966 84.8022 13.8551 84.8022 13.5738C84.8022 13.3466 84.7226 13.1562 84.5636 13.0028C84.4045 12.8466 84.1601 12.7301 83.8306 12.6534L82.7397 12.3977C82.1403 12.2557 81.6999 12.0355 81.4187 11.7372C81.1403 11.4361 81.0011 11.0596 81.0011 10.6079C81.0011 10.2386 81.1047 9.9119 81.3121 9.62781C81.5224 9.34372 81.8079 9.12071 82.1687 8.95878C82.5323 8.79685 82.9442 8.71588 83.4045 8.71588C84.0522 8.71588 84.5607 8.85793 84.93 9.14202C85.3022 9.42611 85.5664 9.80111 85.7226 10.267Z" fill="#174361"/>
        <path d="M73.4712 15.3466H72.3633L75.5678 6.61932H76.6587L79.8633 15.3466H78.7553L76.1474 8.00001H76.0792L73.4712 15.3466ZM73.8803 11.9375H78.3462V12.875H73.8803V11.9375Z" fill="#174361"/>
        <path d="M65.3619 15.4829C64.7312 15.4829 64.1871 15.3437 63.7298 15.0653C63.2752 14.7841 62.9244 14.392 62.6772 13.8892C62.4329 13.3835 62.3107 12.7954 62.3107 12.125C62.3107 11.4545 62.4329 10.8636 62.6772 10.3522C62.9244 9.83804 63.2681 9.43747 63.7085 9.15054C64.1516 8.86077 64.6687 8.71588 65.2596 8.71588C65.6005 8.71588 65.9372 8.7727 66.2695 8.88634C66.6019 8.99997 66.9045 9.18463 67.1772 9.44031C67.4499 9.69315 67.6673 10.0284 67.8292 10.446C67.9911 10.8636 68.0721 11.3778 68.0721 11.9886V12.4147H63.0266V11.5454H67.0494C67.0494 11.1761 66.9755 10.8466 66.8278 10.5568C66.6829 10.267 66.4755 10.0383 66.2056 9.87071C65.9386 9.7031 65.6232 9.61929 65.2596 9.61929C64.859 9.61929 64.5124 9.71872 64.2198 9.91759C63.93 10.1136 63.707 10.3693 63.5508 10.6846C63.3945 11 63.3164 11.338 63.3164 11.6988V12.2784C63.3164 12.7727 63.4016 13.1917 63.5721 13.5355C63.7454 13.8764 63.9854 14.1363 64.2923 14.3153C64.5991 14.4914 64.9556 14.5795 65.3619 14.5795C65.6261 14.5795 65.8647 14.5426 66.0778 14.4687C66.2937 14.392 66.4798 14.2784 66.636 14.1278C66.7923 13.9744 66.913 13.7841 66.9982 13.5568L67.9698 13.8295C67.8675 14.1591 67.6957 14.4488 67.4542 14.6988C67.2127 14.946 66.9144 15.1392 66.5593 15.2784C66.2042 15.4147 65.805 15.4829 65.3619 15.4829Z" fill="#174361"/>
        <path d="M57.636 15.483C57.0906 15.483 56.609 15.3452 56.1914 15.0696C55.7738 14.7912 55.4471 14.3992 55.2113 13.8935C54.9755 13.3849 54.8576 12.7841 54.8576 12.0909C54.8576 11.4034 54.9755 10.8068 55.2113 10.3011C55.4471 9.79546 55.7752 9.40483 56.1957 9.12927C56.6161 8.8537 57.1019 8.71591 57.6531 8.71591C58.0792 8.71591 58.4158 8.78694 58.663 8.92898C58.913 9.06819 59.1033 9.22728 59.234 9.40626C59.3676 9.58239 59.4712 9.72728 59.5451 9.84091H59.6303V6.61932H60.636V15.3466H59.6644V14.3409H59.5451C59.4712 14.4602 59.3661 14.6108 59.2298 14.7926C59.0934 14.9716 58.8988 15.1321 58.646 15.2742C58.3931 15.4134 58.0565 15.483 57.636 15.483ZM57.7724 14.5796C58.1758 14.5796 58.5167 14.4744 58.7951 14.2642C59.0735 14.0511 59.2852 13.7571 59.43 13.3821C59.5749 13.0043 59.6474 12.5682 59.6474 12.0739C59.6474 11.5852 59.5764 11.1577 59.4343 10.7912C59.2923 10.4219 59.082 10.1349 58.8036 9.9304C58.5252 9.72302 58.1815 9.61932 57.7724 9.61932C57.3462 9.61932 56.9911 9.7287 56.707 9.94745C56.4258 10.1634 56.2141 10.4574 56.0721 10.8296C55.9329 11.1989 55.8633 11.6136 55.8633 12.0739C55.8633 12.5398 55.9343 12.9631 56.0764 13.3438C56.2212 13.7216 56.4343 14.0227 56.7156 14.2472C56.9997 14.4688 57.3519 14.5796 57.7724 14.5796Z" fill="#174361"/>
        <path d="M50.6634 15.4829C50.0724 15.4829 49.554 15.3423 49.108 15.0611C48.6648 14.7798 48.3182 14.3863 48.0682 13.8807C47.821 13.375 47.6974 12.7841 47.6974 12.1079C47.6974 11.4261 47.821 10.8309 48.0682 10.3224C48.3182 9.81389 48.6648 9.41901 49.108 9.13776C49.554 8.85651 50.0724 8.71588 50.6634 8.71588C51.2543 8.71588 51.7713 8.85651 52.2145 9.13776C52.6605 9.41901 53.0071 9.81389 53.2543 10.3224C53.5043 10.8309 53.6293 11.4261 53.6293 12.1079C53.6293 12.7841 53.5043 13.375 53.2543 13.8807C53.0071 14.3863 52.6605 14.7798 52.2145 15.0611C51.7713 15.3423 51.2543 15.4829 50.6634 15.4829ZM50.6634 14.5795C51.1122 14.5795 51.4815 14.4645 51.7713 14.2343C52.0611 14.0042 52.2756 13.7017 52.4148 13.3267C52.554 12.9517 52.6236 12.5454 52.6236 12.1079C52.6236 11.6704 52.554 11.2628 52.4148 10.8849C52.2756 10.5071 52.0611 10.2017 51.7713 9.96872C51.4815 9.73577 51.1122 9.61929 50.6634 9.61929C50.2145 9.61929 49.8452 9.73577 49.5554 9.96872C49.2656 10.2017 49.0511 10.5071 48.9119 10.8849C48.7727 11.2628 48.7031 11.6704 48.7031 12.1079C48.7031 12.5454 48.7727 12.9517 48.9119 13.3267C49.0511 13.7017 49.2656 14.0042 49.5554 14.2343C49.8452 14.4645 50.2145 14.5795 50.6634 14.5795Z" fill="#174361"/>
        <path d="M46.4329 9.34659H45.3761C45.3136 9.04261 45.2042 8.77557 45.048 8.54545C44.8946 8.31534 44.7071 8.12216 44.4855 7.96591C44.2667 7.80682 44.0238 7.6875 43.7568 7.60795C43.4897 7.52841 43.2113 7.48864 42.9215 7.48864C42.3931 7.48864 41.9144 7.62216 41.4855 7.8892C41.0593 8.15625 40.7198 8.54972 40.467 9.0696C40.217 9.58949 40.092 10.2273 40.092 10.983C40.092 11.7386 40.217 12.3764 40.467 12.8963C40.7198 13.4162 41.0593 13.8097 41.4855 14.0767C41.9144 14.3438 42.3931 14.4773 42.9215 14.4773C43.2113 14.4773 43.4897 14.4375 43.7568 14.358C44.0238 14.2784 44.2667 14.1605 44.4855 14.0043C44.7071 13.8452 44.8946 13.6506 45.048 13.4205C45.2042 13.1875 45.3136 12.9205 45.3761 12.6193H46.4329C46.3534 13.0653 46.2085 13.4645 45.9983 13.8168C45.788 14.169 45.5267 14.4688 45.2142 14.7159C44.9017 14.9602 44.5508 15.1463 44.1616 15.2741C43.7752 15.402 43.3619 15.4659 42.9215 15.4659C42.1772 15.4659 41.5153 15.2841 40.9358 14.9205C40.3562 14.5568 39.9002 14.0398 39.5679 13.3693C39.2355 12.6989 39.0693 11.9034 39.0693 10.983C39.0693 10.0625 39.2355 9.26705 39.5679 8.59659C39.9002 7.92614 40.3562 7.40909 40.9358 7.04545C41.5153 6.68182 42.1772 6.5 42.9215 6.5C43.3619 6.5 43.7752 6.56392 44.1616 6.69176C44.5508 6.8196 44.9017 7.0071 45.2142 7.25426C45.5267 7.49858 45.788 7.79688 45.9983 8.14915C46.2085 8.49858 46.3534 8.89773 46.4329 9.34659Z" fill="#174361"/>
        <path d="M33.9162 6.61932V15.3466H32.8594V6.61932H33.9162Z" fill="#174361"/>
        <path d="M25.108 15.3466H24L27.2045 6.61932H28.2955L31.5 15.3466H30.392L27.7841 8.00001H27.7159L25.108 15.3466ZM25.517 11.9375H29.983V12.875H25.517V11.9375Z" fill="#174361"/>
        <path d="M135.002 4C135.002 2.89543 135.897 2 137.002 2H164.193C165.297 2 166.193 2.89543 166.193 4V18C166.193 19.1046 165.297 20 164.193 20H137.002C135.897 20 135.002 19.1046 135.002 18V4Z" fill="#689A30"/>
        <path d="M153.991 11.5284V15.3636H152.448V8.81814H153.923V9.93035H153.999C154.15 9.56388 154.39 9.27268 154.719 9.05677C155.052 8.84087 155.462 8.73291 155.951 8.73291C156.403 8.73291 156.796 8.8295 157.131 9.02268C157.469 9.21586 157.731 9.49569 157.915 9.86217C158.103 10.2286 158.195 10.6733 158.192 11.196V15.3636H156.65V11.4346C156.65 10.9971 156.536 10.6548 156.309 10.4076C156.084 10.1605 155.773 10.0369 155.376 10.0369C155.106 10.0369 154.866 10.0965 154.656 10.2159C154.448 10.3323 154.285 10.5014 154.165 10.723C154.049 10.9446 153.991 11.213 153.991 11.5284Z" fill="white"/>
        <path d="M151.022 11C151.022 11.9403 150.846 12.7457 150.493 13.4162C150.144 14.0838 149.667 14.5952 149.061 14.9503C148.459 15.3054 147.776 15.4829 147.012 15.4829C146.248 15.4829 145.563 15.3054 144.958 14.9503C144.355 14.5923 143.878 14.0795 143.526 13.4119C143.176 12.7415 143.002 11.9375 143.002 11C143.002 10.0596 143.176 9.25567 143.526 8.58805C143.878 7.9176 144.355 7.40481 144.958 7.0497C145.563 6.69459 146.248 6.51703 147.012 6.51703C147.776 6.51703 148.459 6.69459 149.061 7.0497C149.667 7.40481 150.144 7.9176 150.493 8.58805C150.846 9.25567 151.022 10.0596 151.022 11ZM149.432 11C149.432 10.3381 149.328 9.77981 149.121 9.32527C148.917 8.86788 148.632 8.52271 148.269 8.28976C147.905 8.05396 147.486 7.93606 147.012 7.93606C146.537 7.93606 146.118 8.05396 145.755 8.28976C145.391 8.52271 145.105 8.86788 144.898 9.32527C144.694 9.77981 144.591 10.3381 144.591 11C144.591 11.6619 144.694 12.2216 144.898 12.679C145.105 13.1335 145.391 13.4787 145.755 13.7145C146.118 13.9474 146.537 14.0639 147.012 14.0639C147.486 14.0639 147.905 13.9474 148.269 13.7145C148.632 13.4787 148.917 13.1335 149.121 12.679C149.328 12.2216 149.432 11.6619 149.432 11Z" fill="white"/>
        </svg>""";
  }

}
